name: Deploy CI

on:
  push:
    branches: [ "master" ]
  workflow_call:

env:
  IMAGE_NAME: 'knowknow-api'

jobs:
  autodeploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Build project
      run: npm i; npm run build:dev

    - name: Build the Docker image
      run: docker build . --file Dockerfile -t ${{ env.IMAGE_NAME }}

    - name: Save the Docker image and gzip
      run: docker save ${{ env.IMAGE_NAME }} | gzip > ${{ env.IMAGE_NAME }}.tar.gz

    - name: Upload image file to remote server
      uses: wlixcc/SFTP-Deploy-Action@v1.2.4
      with:
        server: ${{ vars.PROD_HOST }}
        port: ${{ vars.PROD_PORT }}
        username: ${{ secrets.PROD_DEPLOY_USER }}
        password: ${{ secrets.PROD_DEPLOY_PASS }}
        local_path: './${{ env.IMAGE_NAME }}.tar.gz'
        remote_path: './'
        sftp_only: true

    - name: Deploy
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ vars.PROD_HOST }}
        port: ${{ vars.PROD_PORT }}
        username: ${{ secrets.PROD_DEPLOY_USER }}
        password: ${{ secrets.PROD_DEPLOY_PASS }}
        script: |        
          # stop runnin container(s)
          sudo docker ps -q --filter "name=${{ env.IMAGE_NAME }}" | xargs -r sudo docker stop
          # remove existing container(s)
          sudo docker ps -aq --filter "name=${{ env.IMAGE_NAME }}" | xargs -r sudo docker rm
          #remove existing image(s)
          sudo docker images -a | grep ${{ env.IMAGE_NAME }} | awk '{print $3}' | xargs -r sudo docker rmi

          sudo docker load < ./${{ env.IMAGE_NAME }}.tar.gz
          rm ./${{ env.IMAGE_NAME }}.tar.gz
          sudo docker run --name ${{ env.IMAGE_NAME }} --add-host host.docker.internal:host-gateway -v /usr/local/etc/${{ env.IMAGE_NAME }}:/opt/${{ env.IMAGE_NAME }}/built/config -d ${{ env.IMAGE_NAME }}

        
